Task: Solving a black-box graph combinatorial optimization problem via stochastic solution sampling following "heuristics".

An example function you should improve upon is given below:

```python
def heuristics(node_attr: np.ndarray, edge_attr: np.ndarray, edge_constraint: float) -> np.ndarray:
    return np.ones_like(edge_attr)
```

You should create a totally new strategy for me. Provide a brief description of the new function and its corresponding code. The code function must be named 'heuristics'. The `heuristics` function takes as input a vector of node attributes (shape: n), a matrix of edge attributes (shape: n by n), and a constraint imposed on the sum of edge attributes. A special node is indexed by 0. `heuristics` returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input matrix of edge attributes.

Your code description must start with ‘<start>’ and end with ‘<end>’. 
Your Python code should be formatted as a Python code string: "```python ... ```"

Be creative and do not give additional explanation.